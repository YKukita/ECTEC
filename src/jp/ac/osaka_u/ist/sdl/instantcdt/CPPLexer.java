/* The following code was generated by JFlex 1.4.3 on 13/10/20 20:37 */

/* This is a lexer for C/C++ */

package jp.ac.osaka_u.ist.sdl.instantcdt;

import java.util.List;
import java.util.ArrayList;

import jp.ac.osaka_u.ist.sdl.instantcdt.Lexer;
import jp.ac.osaka_u.ist.sdl.instantcdt.Symbol;
import jp.ac.osaka_u.ist.sdl.instantcdt.Token;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/10/20 20:37 from the specification file
 * <tt>C:/workspace/ECTEC/src/jp/ac/osaka_u/ist/sdl/ectec/cdt/cpp.flex</tt>
 */
public class CPPLexer extends Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\76\1\40"+
    "\1\106\1\0\1\105\1\102\1\27\1\63\1\64\1\5\1\22\1\72"+
    "\1\21\1\26\1\4\1\6\1\51\1\41\1\53\2\16\1\52\1\16"+
    "\2\11\1\101\1\71\1\75\1\73\1\74\1\100\1\0\3\13\1\24"+
    "\1\20\1\24\5\30\1\10\13\30\1\15\2\30\1\67\1\32\1\70"+
    "\1\104\1\31\1\0\1\44\1\34\1\12\1\25\1\17\1\23\1\46"+
    "\1\47\1\42\1\30\1\54\1\7\1\57\1\36\1\45\1\56\1\62"+
    "\1\37\1\43\1\35\1\33\1\61\1\50\1\14\1\55\1\60\1\65"+
    "\1\103\1\66\1\77\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\2\6\1\5"+
    "\3\6\1\7\1\10\2\6\1\11\1\1\5\6\1\12"+
    "\11\6\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\1\1\40"+
    "\2\0\1\41\1\42\1\43\1\5\3\0\2\44\13\6"+
    "\1\45\1\46\1\47\1\50\1\51\6\6\1\52\1\6"+
    "\1\53\3\0\16\6\1\54\10\6\1\55\12\6\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\55\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\2\0"+
    "\1\43\1\105\1\44\1\0\10\6\1\34\7\6\1\106"+
    "\4\6\1\107\5\6\1\110\1\111\3\0\11\6\1\112"+
    "\3\6\1\113\2\6\1\26\7\6\1\114\10\6\1\71"+
    "\1\115\15\6\1\116\1\117\1\120\2\0\1\105\1\121"+
    "\1\122\2\6\1\123\3\6\1\124\1\6\1\125\1\126"+
    "\4\6\1\127\13\6\1\0\7\6\1\130\1\6\1\131"+
    "\2\6\1\132\1\6\1\133\25\6\1\134\11\6\1\135"+
    "\1\136\1\137\1\140\1\6\1\141\1\27\6\6\1\142"+
    "\1\143\1\144\1\6\1\145\1\146\6\6\1\0\1\147"+
    "\1\150\1\6\1\151\1\152\1\6\1\33\2\6\1\153"+
    "\11\6\1\154\10\6\1\155\3\6\1\72\3\6\1\156"+
    "\14\6\1\73\1\157\1\6\1\160\1\161\1\162\1\6"+
    "\1\163\1\6\1\164\1\6\1\0\1\6\1\32\4\6"+
    "\1\165\2\6\1\65\1\166\2\6\1\167\1\170\2\6"+
    "\1\171\1\172\1\173\1\174\1\175\2\6\1\70\3\6"+
    "\1\176\1\6\1\177\13\6\1\200\6\6\1\201\3\6"+
    "\1\202\2\6\1\203\1\204\2\6\1\205\1\206\1\6"+
    "\1\207\1\210\1\6\1\211\2\6\1\212\1\213\1\214"+
    "\1\215\1\6\1\216\1\217\1\6\1\220\1\221\2\6"+
    "\1\222\3\6\1\223\1\224\1\6\1\225\1\226\3\6"+
    "\1\227\4\6\1\230\1\231\3\6\1\232\5\6\1\233"+
    "\1\6\1\234\1\235\3\6\1\236\2\6\1\237";

  private static int [] zzUnpackAction() {
    int [] result = new int[529];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\216\0\u011c\0\u0163\0\u01aa"+
    "\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2"+
    "\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a"+
    "\0\u0661\0\216\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b"+
    "\0\u0852\0\u0899\0\u08e0\0\216\0\216\0\216\0\216\0\216"+
    "\0\216\0\216\0\216\0\u0927\0\u096e\0\u09b5\0\u09fc\0\216"+
    "\0\216\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed"+
    "\0\u0c34\0\216\0\u0c7b\0\u0cc2\0\216\0\216\0\u0d09\0\216"+
    "\0\u0d50\0\u0d97\0\u0dde\0\216\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa"+
    "\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132"+
    "\0\216\0\216\0\u1179\0\216\0\216\0\u11c0\0\u1207\0\u124e"+
    "\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1\0\216\0\u13f8\0\u143f"+
    "\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677"+
    "\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af"+
    "\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7"+
    "\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f"+
    "\0\u1d66\0\u1dad\0\u1df4\0\216\0\216\0\u1e3b\0\216\0\u1e82"+
    "\0\216\0\216\0\216\0\216\0\216\0\216\0\216\0\216"+
    "\0\216\0\216\0\216\0\216\0\u1ec9\0\216\0\216\0\216"+
    "\0\216\0\216\0\216\0\u1f10\0\u1f57\0\216\0\u1f9e\0\u1fe5"+
    "\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d"+
    "\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e\0\u2455"+
    "\0\u249c\0\216\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u0238\0\u25ff"+
    "\0\u2646\0\u268d\0\u26d4\0\u271b\0\216\0\216\0\u2762\0\u27a9"+
    "\0\u27f0\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1"+
    "\0\u2a28\0\u2a6f\0\u0238\0\u2ab6\0\u2afd\0\u2b44\0\u0238\0\u2b8b"+
    "\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3"+
    "\0\u2e0a\0\u0238\0\u2e51\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4"+
    "\0\u2ffb\0\u3042\0\u3089\0\u0238\0\u30d0\0\u3117\0\u315e\0\u31a5"+
    "\0\u31ec\0\u3233\0\u327a\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd"+
    "\0\u3424\0\216\0\u346b\0\216\0\u34b2\0\u34f9\0\216\0\u0238"+
    "\0\u0238\0\u3540\0\u3587\0\u0238\0\u35ce\0\u3615\0\u365c\0\u36a3"+
    "\0\u36ea\0\u0238\0\u0238\0\u3731\0\u3778\0\u37bf\0\u3806\0\u0238"+
    "\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e"+
    "\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76"+
    "\0\u3cbd\0\u3d04\0\u3d4b\0\u0238\0\u3d92\0\u0238\0\u3dd9\0\u3e20"+
    "\0\u0238\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c\0\u3f83\0\u3fca\0\u4011"+
    "\0\u4058\0\u409f\0\u40e6\0\u412d\0\u4174\0\u41bb\0\u4202\0\u4249"+
    "\0\u4290\0\u42d7\0\u431e\0\u4365\0\u43ac\0\u43f3\0\u443a\0\u4481"+
    "\0\u0238\0\u44c8\0\u450f\0\u4556\0\u459d\0\u45e4\0\u462b\0\u4672"+
    "\0\u46b9\0\u4700\0\216\0\216\0\u0238\0\u0238\0\u4747\0\u478e"+
    "\0\u0238\0\u47d5\0\u481c\0\u4863\0\u48aa\0\u48f1\0\u4938\0\u0238"+
    "\0\u0238\0\u0238\0\u497f\0\u0238\0\u0238\0\u49c6\0\u4a0d\0\u4a54"+
    "\0\u4a9b\0\u4ae2\0\u4b29\0\u4b70\0\u0238\0\u0238\0\u4bb7\0\u0238"+
    "\0\u0238\0\u4bfe\0\u0238\0\u4c45\0\u4c8c\0\u0238\0\u4cd3\0\u4d1a"+
    "\0\u4d61\0\u4da8\0\u4def\0\u4e36\0\u4e7d\0\u4ec4\0\u4f0b\0\u0238"+
    "\0\u4f52\0\u4f99\0\u4fe0\0\u5027\0\u506e\0\u50b5\0\u50fc\0\u5143"+
    "\0\u0238\0\u518a\0\u51d1\0\u5218\0\u0238\0\u525f\0\u52a6\0\u52ed"+
    "\0\u0238\0\u5334\0\u537b\0\u53c2\0\u5409\0\u5450\0\u5497\0\u54de"+
    "\0\u5525\0\u556c\0\u55b3\0\u55fa\0\u5641\0\u0238\0\u0238\0\u5688"+
    "\0\u0238\0\u0238\0\u0238\0\u56cf\0\u0238\0\u5716\0\u0238\0\u575d"+
    "\0\u57a4\0\u57eb\0\u0238\0\u5832\0\u5879\0\u58c0\0\u5907\0\u0238"+
    "\0\u594e\0\u5995\0\u0238\0\u0238\0\u59dc\0\u5a23\0\u0238\0\u0238"+
    "\0\u5a6a\0\u5ab1\0\u0238\0\u5af8\0\u0238\0\u0238\0\u0238\0\u5b3f"+
    "\0\u5b86\0\u0238\0\u5bcd\0\u5c14\0\u5c5b\0\u0238\0\u5ca2\0\u0238"+
    "\0\u5ce9\0\u5d30\0\u5d77\0\u5dbe\0\u5e05\0\u5e4c\0\u5e93\0\u5eda"+
    "\0\u5f21\0\u5f68\0\u5faf\0\u0238\0\u5ff6\0\u603d\0\u6084\0\u60cb"+
    "\0\u6112\0\u6159\0\u0238\0\u61a0\0\u61e7\0\u622e\0\u0238\0\u6275"+
    "\0\u62bc\0\u0238\0\u0238\0\u6303\0\u634a\0\u0238\0\u0238\0\u6391"+
    "\0\u0238\0\u0238\0\u63d8\0\u0238\0\u641f\0\u6466\0\u0238\0\u0238"+
    "\0\u0238\0\u0238\0\u64ad\0\u0238\0\u0238\0\u64f4\0\u0238\0\u0238"+
    "\0\u653b\0\u6582\0\u0238\0\u65c9\0\u6610\0\u6657\0\u0238\0\u0238"+
    "\0\u669e\0\u0238\0\u0238\0\u66e5\0\u672c\0\u6773\0\u0238\0\u67ba"+
    "\0\u6801\0\u6848\0\u688f\0\u0238\0\u0238\0\u68d6\0\u691d\0\u6964"+
    "\0\u0238\0\u69ab\0\u69f2\0\u6a39\0\u6a80\0\u6ac7\0\u0238\0\u6b0e"+
    "\0\u0238\0\u0238\0\u6b55\0\u6b9c\0\u6be3\0\u0238\0\u6c2a\0\u6c71"+
    "\0\u0238";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[529];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\12\1\15\1\12\1\13\1\16\1\12"+
    "\1\17\1\20\1\21\1\12\1\22\1\23\1\24\2\12"+
    "\1\3\1\25\1\26\1\27\1\30\1\31\1\32\1\13"+
    "\1\33\1\34\1\35\1\36\1\37\1\12\1\40\3\13"+
    "\2\12\1\41\1\42\1\12\1\43\1\12\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\2\3\27\70\1\71\5\70\1\72"+
    "\46\70\111\0\1\5\110\0\1\73\1\74\65\0\1\75"+
    "\106\0\1\76\21\0\1\77\2\100\1\101\2\0\2\102"+
    "\1\77\2\103\2\0\3\104\1\105\12\0\1\77\7\0"+
    "\3\77\41\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\1\12\1\106\2\12\1\107\15\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\22\12\32\0\1\13\2\100\1\13\4\0\1\13\2\103"+
    "\2\0\3\104\1\105\12\0\1\13\7\0\3\13\41\0"+
    "\1\12\1\110\11\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\3\12\1\111\1\112\1\12\1\113\13\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\4\12\1\114\15\12\32\0\1\12\1\115\4\12"+
    "\1\116\4\12\2\0\3\12\2\0\2\12\1\0\3\12"+
    "\1\117\1\120\1\0\22\12\45\0\1\121\51\0\1\122"+
    "\1\123\34\0\1\124\50\0\1\125\21\0\1\12\1\126"+
    "\11\12\2\0\3\12\2\0\2\12\1\0\4\12\1\127"+
    "\1\0\1\12\1\130\1\12\1\131\1\132\15\12\32\0"+
    "\11\12\1\133\1\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\4\12\1\134\7\12\1\135\5\12\31\0"+
    "\1\136\1\105\2\0\1\105\4\0\1\105\7\0\1\137"+
    "\12\0\1\105\7\0\3\105\33\0\1\140\2\0\24\140"+
    "\1\0\2\140\1\141\54\140\6\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\3\12\1\142\1\12\1\0\2\12"+
    "\1\143\17\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\4\12\1\144\1\0\1\12\1\145\2\12\1\146"+
    "\15\12\32\0\11\12\1\147\1\12\2\0\3\12\2\0"+
    "\2\12\1\0\4\12\1\150\1\0\6\12\1\151\5\12"+
    "\1\152\5\12\32\0\11\12\1\153\1\12\2\0\3\12"+
    "\2\0\2\12\1\0\1\154\4\12\1\0\3\12\1\155"+
    "\1\156\15\12\32\0\11\12\1\157\1\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\22\12\32\0\13\12"+
    "\2\0\1\160\2\12\2\0\2\12\1\0\3\12\1\161"+
    "\1\12\1\0\22\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\2\12\1\162\2\12\1\0\1\12\1\163"+
    "\4\12\1\164\1\165\12\12\32\0\1\12\1\166\11\12"+
    "\2\0\3\12\2\0\2\12\1\0\3\12\1\167\1\12"+
    "\1\0\2\12\1\170\17\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\4\12\1\171\1\0\15\12\1\172"+
    "\2\12\1\173\1\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\4\12\1\174\15\12\32\0"+
    "\4\12\1\175\6\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\6\12\1\176\13\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\1\177\3\12\1\200\1\0"+
    "\22\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\1\201\4\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\1\12\1\202\2\12"+
    "\1\203\15\12\117\0\1\204\106\0\1\205\1\206\105\0"+
    "\1\207\1\0\1\210\3\0\1\211\3\0\1\212\74\0"+
    "\1\213\107\0\1\214\4\0\1\215\100\0\1\216\6\0"+
    "\1\217\77\0\1\220\7\0\1\221\76\0\1\222\106\0"+
    "\1\223\1\224\4\0\1\225\113\0\1\226\1\70\2\0"+
    "\27\70\1\0\5\70\1\0\46\70\32\0\1\227\2\0"+
    "\1\230\1\231\1\232\1\233\46\0\1\73\1\4\1\5"+
    "\104\73\5\234\1\235\101\234\6\0\1\77\2\236\1\101"+
    "\4\0\1\77\2\103\2\0\3\104\1\105\12\0\1\77"+
    "\7\0\3\77\41\0\1\101\2\0\1\101\4\0\1\101"+
    "\2\103\2\0\3\104\1\105\12\0\1\101\7\0\3\101"+
    "\41\0\1\237\2\0\3\237\2\0\3\237\2\0\3\237"+
    "\6\0\1\237\4\0\1\237\2\0\1\237\4\0\3\237"+
    "\41\0\1\240\2\0\1\240\4\0\1\240\2\0\2\241"+
    "\16\0\1\240\7\0\3\240\41\0\1\105\2\0\1\105"+
    "\4\0\1\105\2\103\2\0\3\104\13\0\1\105\7\0"+
    "\3\105\41\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\3\12\1\242\1\12\1\0\22\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\3\12\1\243\1\12\1\0"+
    "\22\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\3\12\1\244\16\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\2\12\1\245\2\12\1\0"+
    "\2\12\1\246\17\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\3\12\1\247\1\12\1\0\16\12\1\250"+
    "\3\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\3\12\1\251\16\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\4\12\1\252\1\0\22\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\1\12\1\253\1\254\17\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\2\12\1\255\2\12\1\0"+
    "\15\12\1\256\4\12\32\0\13\12\2\0\2\12\1\257"+
    "\2\0\2\12\1\0\1\260\4\12\1\0\22\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\4\12\1\261"+
    "\1\0\22\12\31\0\1\262\107\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\4\12\1\263\15\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\1\12\1\264\20\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\3\12\1\265\1\12\1\0\22\12"+
    "\32\0\1\12\1\266\11\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\4\12\1\267\1\0\22\12\32\0"+
    "\1\12\1\270\2\12\1\271\6\12\2\0\1\272\2\12"+
    "\2\0\2\12\1\0\5\12\1\0\22\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\1\273\4\12\1\0"+
    "\22\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\3\12\1\274\1\12\1\0\22\12\52\0\1\275\107\0"+
    "\1\276\65\0\1\277\7\0\1\300\4\0\1\140\3\0"+
    "\1\140\2\0\1\140\1\301\5\140\1\277\7\0\1\277"+
    "\1\300\1\277\41\0\13\12\2\0\2\12\1\302\2\0"+
    "\2\12\1\0\5\12\1\0\1\12\1\303\1\304\17\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\1\12\1\305\20\12\32\0\11\12\1\306\1\12"+
    "\2\0\3\12\2\0\2\12\1\0\5\12\1\0\22\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\2\12"+
    "\1\307\2\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\4\12\1\310\15\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\16\12\1\311\3\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\1\312\4\12\1\0\14\12\1\313"+
    "\5\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\4\12\1\314\1\0\1\12\1\315\20\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\5\12\1\0\15\12"+
    "\1\316\4\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\7\12\1\317\12\12\32\0\1\12"+
    "\1\320\11\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\16\12\1\321\3\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\2\12\1\322\2\12"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\2\12\1\323\2\12\1\0\1\12\1\324\3\12"+
    "\1\325\14\12\32\0\13\12\2\0\2\12\1\326\2\0"+
    "\2\12\1\0\3\12\1\327\1\12\1\0\22\12\32\0"+
    "\1\12\1\330\2\12\1\331\6\12\2\0\3\12\2\0"+
    "\2\12\1\0\2\12\1\332\2\12\1\0\2\12\1\333"+
    "\17\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\4\12\1\334\1\0\3\12\1\335\16\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\5\12\1\0\5\12"+
    "\1\336\11\12\1\337\2\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\4\12\1\340\15\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\1\12\1\341\20\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\1\12\1\342\20\12"+
    "\32\0\13\12\2\0\2\12\1\343\2\0\2\12\1\0"+
    "\5\12\1\0\22\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\16\12\1\344\3\12\32\0"+
    "\13\12\2\0\3\12\2\0\1\12\1\345\1\0\5\12"+
    "\1\0\22\12\32\0\11\12\1\346\1\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\22\12\32\0\11\12"+
    "\1\347\1\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\2\12\1\350\2\12\1\0\22\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\5\12\1\0\6\12"+
    "\1\351\13\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\1\12\1\352\20\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\1\12\1\353\3\12"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\1\12\1\354\1\12\1\355\1\356"+
    "\15\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\2\12\1\357\2\12\1\0\22\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\4\12\1\360\1\0\22\12"+
    "\32\0\1\12\1\361\11\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\22\12\117\0\1\362\1\363\105\0"+
    "\1\364\120\0\1\365\1\0\5\234\1\366\101\234\4\0"+
    "\1\5\1\235\107\0\1\237\2\367\3\237\2\0\3\237"+
    "\2\0\3\237\6\0\1\237\4\0\1\237\2\0\1\237"+
    "\4\0\3\237\41\0\1\240\2\0\1\240\4\0\1\240"+
    "\4\0\3\104\13\0\1\240\7\0\3\240\41\0\1\240"+
    "\2\0\1\240\4\0\1\240\22\0\1\240\7\0\3\240"+
    "\41\0\11\12\1\370\1\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\5\12\1\371\14\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\2\12\1\372\17\12\32\0\4\12\1\373\6\12"+
    "\2\0\3\12\2\0\2\12\1\0\5\12\1\0\22\12"+
    "\32\0\11\12\1\374\1\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\2\12\1\375\2\12\1\0\2\12"+
    "\1\376\17\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\15\12\1\377\4\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\4\12\1\u0100\1\0"+
    "\22\12\32\0\13\12\2\0\3\12\2\0\1\12\1\u0101"+
    "\1\0\5\12\1\0\22\12\32\0\13\12\2\0\1\u0102"+
    "\2\12\2\0\2\12\1\0\5\12\1\0\22\12\32\0"+
    "\11\12\1\u0103\1\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\22\12\32\0\11\12\1\u0104\1\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\22\12\32\0"+
    "\1\12\1\u0105\11\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\4\12\1\u0106\15\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\1\12\1\u0107"+
    "\20\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\16\12\1\u0108\3\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\4\12\1\u0109"+
    "\15\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\3\12\1\u010a\16\12\32\0\11\12\1\u010b"+
    "\1\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\22\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\3\12\1\u010c\16\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\2\12\1\u010d"+
    "\17\12\32\0\11\12\1\u010e\1\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\22\12\32\0\1\12\1\u010f"+
    "\11\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\22\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\1\12\1\u0110\1\12\1\u0111\16\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\1\12\1\u0112"+
    "\3\12\1\0\22\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\3\12\1\u0113\16\12\32\0"+
    "\1\300\7\0\1\300\10\0\1\276\11\0\1\300\7\0"+
    "\3\300\41\0\1\140\7\0\1\140\10\0\1\276\11\0"+
    "\1\140\7\0\3\140\41\0\1\u0114\2\0\3\u0114\2\0"+
    "\3\u0114\2\0\3\u0114\5\0\1\301\1\u0114\4\0\1\u0114"+
    "\2\0\1\u0114\4\0\3\u0114\41\0\11\12\1\u0115\1\12"+
    "\2\0\3\12\2\0\2\12\1\0\5\12\1\0\22\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\4\12\1\u0116\15\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\1\12\1\u0117\20\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\3\12"+
    "\1\u0118\1\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\3\12\1\u0119\16\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\3\12\1\u011a\1\u011b\15\12\32\0\1\12\1\u011c"+
    "\11\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\22\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\15\12\1\u011d\4\12\32\0\11\12\1\u011e"+
    "\1\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\22\12\32\0\11\12\1\u011f\1\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\4\12\1\u0120\15\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\2\12\1\u0121\17\12\32\0\11\12\1\u0122\1\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\22\12\32\0"+
    "\1\12\1\u0123\11\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\22\12\32\0\11\12\1\u0124\1\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\22\12\32\0"+
    "\13\12\2\0\3\12\2\0\1\12\1\u0125\1\0\5\12"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\1\u0126\4\12\1\0\22\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\3\12\1\u0127\1\12\1\0"+
    "\22\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\1\12\1\u0128\20\12\32\0\11\12\1\u0129"+
    "\1\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\22\12\32\0\13\12\2\0\2\12\1\u012a\2\0\2\12"+
    "\1\0\5\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\1\12\1\u012b\20\12"+
    "\32\0\1\12\1\u012c\11\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\2\12\1\u012d\2\12\1\0\22\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\1\u012e"+
    "\4\12\1\0\22\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\2\12\1\u012f\2\12\1\0\22\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\3\12\1\u0130"+
    "\1\12\1\0\22\12\32\0\11\12\1\u0131\1\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\22\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\4\12\1\u0132"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\2\12\1\u0133\2\12\1\0\22\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\5\12\1\0\5\12"+
    "\1\u0134\14\12\32\0\13\12\2\0\3\12\2\0\1\12"+
    "\1\u0135\1\0\5\12\1\0\22\12\32\0\11\12\1\u0136"+
    "\1\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\22\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\4\12\1\u0137\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\4\12\1\u0138\1\0\22\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\4\12\1\u0139\15\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\3\12\1\u013a\16\12\32\0"+
    "\1\12\1\u013b\11\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\22\12\32\0\1\12\1\u013c\11\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\22\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\20\12\1\u013d\1\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\5\12\1\u013e\14\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\2\12\1\u013f"+
    "\2\12\1\0\22\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\3\12\1\u0140\16\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\2\12\1\u0141"+
    "\2\12\1\0\22\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\3\12\1\u0142\16\12\117\0"+
    "\1\u0143\114\0\1\u0144\5\0\4\234\1\5\1\366\101\234"+
    "\6\0\13\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\2\12\1\u0145\17\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\6\12\1\u0146\13\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\1\12\1\u0147\20\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\2\12\1\u0148\2\12\1\0\22\12"+
    "\32\0\1\12\1\u0149\11\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\10\12\1\u014a\1\12"+
    "\1\u014b\7\12\32\0\11\12\1\u014c\1\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\22\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\4\12\1\u014d\1\0"+
    "\22\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\1\12\1\u014e\20\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\4\12\1\u014f\1\0\22\12"+
    "\32\0\13\12\2\0\1\u0150\2\12\2\0\2\12\1\0"+
    "\5\12\1\0\22\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\4\12\1\u0151\1\0\22\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\2\12\1\u0152\2\12"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\3\12\1\u0153\1\12\1\0\22\12\32\0\1\12"+
    "\1\u0154\11\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\22\12\32\0\11\12\1\u0155\1\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\22\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\2\12\1\u0156\2\12"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\2\12\1\u0157\2\12\1\0\22\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\3\12\1\u0158\1\12"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\1\u0159\4\12\1\0\22\12\32\0\1\12\1\u015a"+
    "\11\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\22\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\16\12\1\u015b\3\12\32\0\1\u015c\2\0"+
    "\3\u015c\2\0\3\u015c\2\0\3\u015c\6\0\1\u015c\4\0"+
    "\1\u015c\2\0\1\u015c\4\0\3\u015c\41\0\13\12\2\0"+
    "\1\u015d\2\12\2\0\2\12\1\0\5\12\1\0\22\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\3\12"+
    "\1\u015e\1\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\5\12\1\u015f\14\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\5\12\1\u0160\14\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\13\12\1\u0161\6\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\3\12"+
    "\1\u0162\1\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\4\12\1\u0163\1\0\22\12\32\0"+
    "\1\12\1\u0164\11\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\22\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\3\12\1\u0165\16\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\7\12\1\u0166\12\12\32\0\13\12\2\0\3\12\2\0"+
    "\1\12\1\u0167\1\0\3\12\1\u0168\1\12\1\0\1\12"+
    "\1\u0169\20\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\15\12\1\u016a\4\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\5\12\1\0\2\12"+
    "\1\u016b\17\12\32\0\11\12\1\u016c\1\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\22\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\4\12\1\u016d\1\0"+
    "\22\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\2\12\1\u016e\2\12\1\0\22\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\2\12\1\u016f"+
    "\17\12\32\0\13\12\2\0\1\u0170\2\12\2\0\2\12"+
    "\1\0\5\12\1\0\22\12\32\0\11\12\1\u0171\1\12"+
    "\2\0\3\12\2\0\2\12\1\0\5\12\1\0\22\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\3\12"+
    "\1\u0172\1\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\1\u0173\4\12\1\0\22\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\3\12\1\u0174\16\12\32\0\4\12\1\u0175\6\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\22\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\1\12\1\u0176\20\12\32\0\11\12\1\u0177\1\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\22\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\4\12\1\u0178\15\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\2\12\1\u0179\2\12\1\0\22\12\32\0"+
    "\4\12\1\u017a\6\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\22\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\3\12\1\u017b\1\12\1\0\22\12\32\0"+
    "\11\12\1\u017c\1\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\22\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\21\12\1\u017d\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\5\12\1\0\3\12"+
    "\1\u017e\16\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\4\12\1\u017f\1\0\22\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\4\12\1\u0180\1\0\22\12"+
    "\32\0\11\12\1\u0181\1\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\1\12\1\u0182\20\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\3\12\1\u0183\16\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\16\12\1\u0184\3\12"+
    "\32\0\11\12\1\u0185\1\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\1\12\1\u0186\3\12\1\0\22\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\1\u0187"+
    "\4\12\1\0\22\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\2\12\1\u0188\2\12\1\0\22\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\3\12\1\u0189"+
    "\1\12\1\0\22\12\32\0\11\12\1\u018a\1\12\2\0"+
    "\3\12\2\0\1\12\1\u018b\1\0\5\12\1\0\22\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\11\12\1\u018c\10\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\1\u018d\21\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\21\12\1\u018e\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\3\12\1\u018f\1\12\1\0\22\12\32\0\4\12"+
    "\1\u0190\6\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\2\12\1\u0191\2\12\1\0\22\12\32\0\13\12"+
    "\2\0\2\12\1\u0192\2\0\2\12\1\0\5\12\1\0"+
    "\22\12\32\0\11\12\1\u0193\1\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\22\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\14\12\1\u0194"+
    "\5\12\32\0\11\12\1\u0195\1\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\22\12\32\0\1\12\1\u0196"+
    "\11\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\22\12\32\0\11\12\1\u0197\1\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\22\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\1\12\1\u0198"+
    "\20\12\32\0\1\u0199\2\0\3\u0199\2\0\3\u0199\2\0"+
    "\3\u0199\6\0\1\u0199\4\0\1\u0199\2\0\1\u0199\4\0"+
    "\3\u0199\41\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\3\12\1\u019a\1\12\1\0\22\12\32\0\13\12\2\0"+
    "\2\12\1\u019b\2\0\2\12\1\0\5\12\1\0\22\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\3\12\1\u019c\16\12\32\0\13\12\2\0\2\12"+
    "\1\u019d\2\0\2\12\1\0\5\12\1\0\22\12\32\0"+
    "\13\12\2\0\2\12\1\u019e\2\0\2\12\1\0\5\12"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\3\12\1\u019f\16\12\32\0\13\12"+
    "\2\0\2\12\1\u01a0\2\0\2\12\1\0\5\12\1\0"+
    "\22\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\2\12\1\u01a1\2\12\1\0\22\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\15\12\1\u01a2"+
    "\4\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\21\12\1\u01a3\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\3\12\1\u01a4\1\12\1\0\22\12"+
    "\32\0\11\12\1\u01a5\1\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\2\12\1\u01a6\2\12\1\0\22\12"+
    "\32\0\13\12\2\0\1\u01a7\2\12\2\0\2\12\1\0"+
    "\5\12\1\0\22\12\32\0\11\12\1\u01a8\1\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\22\12\32\0"+
    "\13\12\2\0\2\12\1\u01a9\2\0\2\12\1\0\5\12"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\3\12\1\u01aa\1\12\1\0\22\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\2\12\1\u01ab\2\12"+
    "\1\0\22\12\32\0\4\12\1\u01ac\6\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\22\12\32\0\13\12"+
    "\2\0\2\12\1\u01ad\2\0\2\12\1\0\5\12\1\0"+
    "\22\12\32\0\13\12\2\0\1\u01ae\2\12\2\0\2\12"+
    "\1\0\5\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\6\12\1\u01af\13\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\3\12\1\u01b0\1\u01b1\15\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\21\12\1\u01b2"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\2\12"+
    "\1\u01b3\2\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\1\12\1\u01b4\20\12"+
    "\32\0\13\12\2\0\3\12\2\0\1\12\1\u01b5\1\0"+
    "\5\12\1\0\22\12\32\0\4\12\1\u01b6\6\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\22\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\2\12\1\u01b7"+
    "\2\12\1\0\22\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\3\12\1\u01b8\16\12\32\0"+
    "\4\12\1\u01b9\6\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\22\12\32\0\1\12\1\u01ba\11\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\22\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\3\12\1\u01bb\16\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\1\12\1\u01bc\20\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\1\u01bd\4\12"+
    "\1\0\22\12\32\0\6\12\1\u01be\4\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\22\12\32\0\4\12"+
    "\1\u01bf\6\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\1\12"+
    "\1\u01c0\1\0\5\12\1\0\22\12\32\0\13\12\2\0"+
    "\3\12\2\0\1\12\1\u01c1\1\0\5\12\1\0\22\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\1\12\1\u01c2\20\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\15\12\1\u01c3\4\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\2\12"+
    "\1\u01c4\2\12\1\0\22\12\32\0\4\12\1\u01c5\6\12"+
    "\2\0\3\12\2\0\2\12\1\0\5\12\1\0\22\12"+
    "\32\0\1\140\2\0\3\140\2\0\3\140\2\0\3\140"+
    "\6\0\1\140\4\0\1\140\2\0\1\140\4\0\3\140"+
    "\41\0\11\12\1\u01c6\1\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\2\12\1\u01c7\2\12\1\0\22\12"+
    "\32\0\13\12\2\0\3\12\2\0\1\12\1\u01c8\1\0"+
    "\5\12\1\0\22\12\32\0\11\12\1\u01c9\1\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\22\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\16\12\1\u01ca\3\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\4\12\1\u01cb\1\0\22\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\5\12\1\0\3\12"+
    "\1\u01cc\16\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\4\12\1\u01cd\1\0\22\12\32\0\11\12\1\u01ce"+
    "\1\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\22\12\32\0\11\12\1\u01cf\1\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\22\12\32\0\4\12\1\u01d0"+
    "\6\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\22\12\32\0\13\12\2\0\3\12\2\0\1\12\1\u01d1"+
    "\1\0\5\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\2\12\1\u01d2\17\12"+
    "\32\0\13\12\2\0\1\u01d3\2\12\2\0\2\12\1\0"+
    "\5\12\1\0\22\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\4\12\1\u01d4\15\12\32\0"+
    "\13\12\2\0\2\12\1\u01d5\2\0\2\12\1\0\5\12"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\2\12\1\u01d6\2\12\1\0\22\12\32\0\11\12"+
    "\1\u01d7\1\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\2\12\1\u01d8\2\12\1\0\22\12\32\0\11\12"+
    "\1\u01d9\1\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\22\12\32\0\1\12\1\u01da\11\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\22\12\32\0\1\12"+
    "\1\u01db\11\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\22\12\32\0\11\12\1\u01dc\1\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\22\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\5\12\1\0\15\12"+
    "\1\u01dd\4\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\3\12\1\u01de\16\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\2\12\1\u01df\2\12"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\2\12\1\u01e0\2\12\1\0\22\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\2\12\1\u01e1\2\12"+
    "\1\0\22\12\32\0\11\12\1\u01e2\1\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\22\12\32\0\13\12"+
    "\2\0\3\12\2\0\1\12\1\u01e3\1\0\5\12\1\0"+
    "\22\12\32\0\13\12\2\0\2\12\1\u01e4\2\0\2\12"+
    "\1\0\5\12\1\0\22\12\32\0\11\12\1\u01e5\1\12"+
    "\2\0\3\12\2\0\2\12\1\0\5\12\1\0\22\12"+
    "\32\0\1\12\1\u01e6\11\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\22\12\32\0\13\12\2\0\1\u01e7"+
    "\2\12\2\0\2\12\1\0\5\12\1\0\22\12\32\0"+
    "\11\12\1\u01e8\1\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\22\12\32\0\4\12\1\u01e9\6\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\22\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\15\12\1\u01ea\4\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\4\12\1\u01eb\1\0\22\12\32\0\11\12"+
    "\1\u01ec\1\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\22\12\32\0\4\12\1\u01ed\6\12\2\0\3\12"+
    "\2\0\2\12\1\0\5\12\1\0\3\12\1\u01ee\16\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\4\12"+
    "\1\u01ef\1\0\22\12\32\0\11\12\1\u01f0\1\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\22\12\32\0"+
    "\11\12\1\u01f1\1\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\22\12\32\0\11\12\1\u01f2\1\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\22\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\4\12\1\u01f3"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\2\12\1\u01f4\17\12\32\0\4\12"+
    "\1\u01f5\6\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\4\12\1\u01f6\15\12\32\0\11\12"+
    "\1\u01f7\1\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\22\12\32\0\13\12\2\0\3\12\2\0\2\12"+
    "\1\0\4\12\1\u01f8\1\0\22\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\4\12\1\u01f9"+
    "\15\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\3\12\1\u01fa\16\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\2\12\1\u01fb"+
    "\17\12\32\0\13\12\2\0\2\12\1\u01fc\2\0\2\12"+
    "\1\0\5\12\1\0\22\12\32\0\13\12\2\0\3\12"+
    "\2\0\2\12\1\0\2\12\1\u01fd\2\12\1\0\22\12"+
    "\32\0\13\12\2\0\3\12\2\0\2\12\1\0\5\12"+
    "\1\0\3\12\1\u01fe\16\12\32\0\4\12\1\u01ff\6\12"+
    "\2\0\3\12\2\0\2\12\1\0\5\12\1\0\22\12"+
    "\32\0\11\12\1\u0200\1\12\2\0\3\12\2\0\2\12"+
    "\1\0\5\12\1\0\22\12\32\0\13\12\2\0\1\u0201"+
    "\2\12\2\0\2\12\1\0\5\12\1\0\22\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\2\12\1\u0202\17\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\2\12\1\u0203\17\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\5\12\1\0"+
    "\2\12\1\u0204\17\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\3\12\1\u0205\16\12\32\0"+
    "\13\12\2\0\3\12\2\0\2\12\1\0\2\12\1\u0206"+
    "\2\12\1\0\22\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\2\12\1\u0207\2\12\1\0\22\12\32\0"+
    "\11\12\1\u0208\1\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\22\12\32\0\13\12\2\0\3\12\2\0"+
    "\2\12\1\0\2\12\1\u0209\2\12\1\0\22\12\32\0"+
    "\1\12\1\u020a\11\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\22\12\32\0\13\12\2\0\3\12\2\0"+
    "\1\12\1\u020b\1\0\5\12\1\0\22\12\32\0\13\12"+
    "\2\0\3\12\2\0\2\12\1\0\4\12\1\u020c\1\0"+
    "\22\12\32\0\4\12\1\u020d\6\12\2\0\3\12\2\0"+
    "\2\12\1\0\5\12\1\0\22\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\2\12\1\u020e\2\12\1\0"+
    "\22\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\5\12\1\0\3\12\1\u020f\16\12\32\0\13\12\2\0"+
    "\3\12\2\0\2\12\1\0\5\12\1\0\2\12\1\u0210"+
    "\17\12\32\0\13\12\2\0\3\12\2\0\2\12\1\0"+
    "\2\12\1\u0211\2\12\1\0\22\12\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27832];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\24\1\1\11\11\1\10\11"+
    "\4\1\2\11\10\1\1\11\2\0\2\11\1\1\1\11"+
    "\3\0\1\11\14\1\2\11\1\1\2\11\10\1\1\11"+
    "\3\0\42\1\2\11\1\1\1\11\1\1\14\11\1\1"+
    "\6\11\2\0\1\11\2\1\1\0\20\1\1\11\12\1"+
    "\2\11\3\0\60\1\1\11\1\1\1\11\2\0\1\11"+
    "\34\1\1\0\56\1\2\11\27\1\1\0\74\1\1\0"+
    "\170\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[529];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  StringBuffer string = new StringBuffer();

  private Token createToken(String str, Symbol sym) {
  	return new Token(str, sym, yyline+1, yycolumn+1, yychar+1);
  }
  
  private Token createToken(Symbol sym) {
  	return new Token(sym.getStr(), sym, yyline+1, yycolumn+1, yychar+1);
  }
  
  public List<Token> runLexicalAnalysis() {
  	List<Token> result = new ArrayList<Token>();
  	try{
  		while (!this.zzAtEOF) {
  			Token token = this.yylex();
  			if (token != null) {
  				result.add(token);
  			}
  		}
  	} catch(Exception e) {
  		e.printStackTrace();
  		return null;
  	}
  	return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CPPLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CPPLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 125: 
          { return createToken(Symbol.SWITCH);
          }
        case 160: break;
        case 82: 
          { return createToken(Symbol.LONG);
          }
        case 161: break;
        case 56: 
          { return createToken(Symbol.ANDEQUAL);
          }
        case 162: break;
        case 58: 
          { return createToken(Symbol.VERTICALVAREQUAL);
          }
        case 163: break;
        case 94: 
          { return createToken(Symbol.DOUBLEPERCENTCOLON);
          }
        case 164: break;
        case 18: 
          { return createToken(Symbol.COMMA);
          }
        case 165: break;
        case 138: 
          { return createToken(Symbol.CHAR16_T);
          }
        case 166: break;
        case 149: 
          { return createToken(Symbol.VOLATILE);
          }
        case 167: break;
        case 155: 
          { return createToken(Symbol.STATIC_CAST);
          }
        case 168: break;
        case 137: 
          { return createToken(Symbol.CONTINUE);
          }
        case 169: break;
        case 77: 
          { return createToken(Symbol.ASM);
          }
        case 170: break;
        case 128: 
          { return createToken(Symbol.DEFAULT);
          }
        case 171: break;
        case 3: 
          { return createToken(Symbol.SLASH);
          }
        case 172: break;
        case 114: 
          { return createToken(Symbol.DELETE);
          }
        case 173: break;
        case 52: 
          { return createToken(Symbol.LBRACKETPERCENT);
          }
        case 174: break;
        case 31: 
          { string.append( yytext() );
          }
        case 175: break;
        case 67: 
          { string.append('\r');
          }
        case 176: break;
        case 115: 
          { return createToken(Symbol.DEFINE);
          }
        case 177: break;
        case 157: 
          { return createToken(Symbol.THREAD_LOCAL);
          }
        case 178: break;
        case 88: 
          { return createToken(Symbol.BOOL);
          }
        case 179: break;
        case 19: 
          { return createToken(Symbol.EQUAL);
          }
        case 180: break;
        case 154: 
          { return createToken(Symbol.INSTANCEOF);
          }
        case 181: break;
        case 152: 
          { return createToken(Symbol.PROTECTED);
          }
        case 182: break;
        case 33: 
          { return createToken(Symbol.SLASHEQUAL);
          }
        case 183: break;
        case 25: 
          { return createToken(Symbol.COLON);
          }
        case 184: break;
        case 61: 
          { return createToken(Symbol.PERCENTRBRACKET);
          }
        case 185: break;
        case 112: 
          { return createToken(Symbol.EXPORT);
          }
        case 186: break;
        case 6: 
          { return createToken(yytext(), Symbol.IDENTIFIER);
          }
        case 187: break;
        case 29: 
          { return createToken(Symbol.PERCENT);
          }
        case 188: break;
        case 153: 
          { return createToken(Symbol.CONST_CAST);
          }
        case 189: break;
        case 76: 
          { return createToken(Symbol.INT);
          }
        case 190: break;
        case 10: 
          { string.setLength(0); yybegin(STRING);
          }
        case 191: break;
        case 86: 
          { return createToken(Symbol.ELSE);
          }
        case 192: break;
        case 51: 
          { return createToken(Symbol.LBRACKETCOLON);
          }
        case 193: break;
        case 80: 
          { return createToken(Symbol.LDOUBLEANGLEBRACKETEQUAL);
          }
        case 194: break;
        case 32: 
          { yybegin(YYINITIAL); 
								return createToken(string.toString(), Symbol.STRINGLITERAL);
          }
        case 195: break;
        case 145: 
          { return createToken(Symbol.TYPENAME);
          }
        case 196: break;
        case 99: 
          { return createToken(Symbol.ERROR);
          }
        case 197: break;
        case 130: 
          { return createToken(Symbol.INCLUDE);
          }
        case 198: break;
        case 146: 
          { return createToken(Symbol.REGISTER);
          }
        case 199: break;
        case 78: 
          { return createToken(Symbol.RDOUBLEANGLEBRACKETEQUAL);
          }
        case 200: break;
        case 147: 
          { return createToken(Symbol.OPERATOR);
          }
        case 201: break;
        case 66: 
          { string.append('\n');
          }
        case 202: break;
        case 28: 
          { return createToken(Symbol.CIRCUMFLEX);
          }
        case 203: break;
        case 134: 
          { return createToken(Symbol.PRIVATE);
          }
        case 204: break;
        case 71: 
          { return createToken(Symbol.FOR);
          }
        case 205: break;
        case 46: 
          { return createToken(Symbol.EQUALEQUAL);
          }
        case 206: break;
        case 84: 
          { return createToken(Symbol.CHAR);
          }
        case 207: break;
        case 57: 
          { return createToken(Symbol.ANDAND);
          }
        case 208: break;
        case 43: 
          { return createToken(Symbol.DOTASTERISK);
          }
        case 209: break;
        case 75: 
          { return createToken(Symbol.NEW);
          }
        case 210: break;
        case 69: 
          { return createToken(yytext(), Symbol.HEXINTEGERLITERAL);
          }
        case 211: break;
        case 60: 
          { return createToken(Symbol.PERCENTEQUAL);
          }
        case 212: break;
        case 116: 
          { return createToken(Symbol.DOUBLE);
          }
        case 213: break;
        case 37: 
          { return createToken(Symbol.MINUSMINUS);
          }
        case 214: break;
        case 8: 
          { return createToken(Symbol.PLUS);
          }
        case 215: break;
        case 64: 
          { string.append('\\');
          }
        case 216: break;
        case 16: 
          { return createToken(Symbol.RBLACKET);
          }
        case 217: break;
        case 50: 
          { return createToken(Symbol.LDOUBLEANGLEBRACKET);
          }
        case 218: break;
        case 158: 
          { return createToken(Symbol.STATIC_ASSERT);
          }
        case 219: break;
        case 104: 
          { return createToken(Symbol.UNION);
          }
        case 220: break;
        case 14: 
          { return createToken(Symbol.RBRACE);
          }
        case 221: break;
        case 100: 
          { return createToken(Symbol.FLOAT);
          }
        case 222: break;
        case 2: 
          { /* ignore */
          }
        case 223: break;
        case 74: 
          { return createToken(Symbol.TRY);
          }
        case 224: break;
        case 44: 
          { return createToken(Symbol.IF);
          }
        case 225: break;
        case 97: 
          { return createToken(Symbol.CONST);
          }
        case 226: break;
        case 132: 
          { return createToken(Symbol.ALIGNOF);
          }
        case 227: break;
        case 136: 
          { return createToken(Symbol.VIRTUAL);
          }
        case 228: break;
        case 62: 
          { return createToken(Symbol.PERCENTCOLON);
          }
        case 229: break;
        case 144: 
          { return createToken(Symbol.TYPE_DEF);
          }
        case 230: break;
        case 135: 
          { return createToken(Symbol.MUTABLE);
          }
        case 231: break;
        case 141: 
          { return createToken(Symbol.DECLTYPE);
          }
        case 232: break;
        case 73: 
          { return createToken(yytext(), Symbol.CHARACTERLITERAL);
          }
        case 233: break;
        case 126: 
          { return createToken(Symbol.PUBLIC);
          }
        case 234: break;
        case 35: 
          { return createToken(yytext(), Symbol.OCTALINTEGERLITERAL);
          }
        case 235: break;
        case 106: 
          { return createToken(Symbol.BREAK);
          }
        case 236: break;
        case 150: 
          { return createToken(Symbol.CONSTEXPR);
          }
        case 237: break;
        case 53: 
          { return createToken(Symbol.NOTEQUAL);
          }
        case 238: break;
        case 23: 
          { return createToken(Symbol.TILDE);
          }
        case 239: break;
        case 85: 
          { return createToken(Symbol.ELIF);
          }
        case 240: break;
        case 54: 
          { return createToken(Symbol.COLONRBRACKET);
          }
        case 241: break;
        case 133: 
          { return createToken(Symbol.WCHAR_T);
          }
        case 242: break;
        case 124: 
          { return createToken(Symbol.SIZEOF);
          }
        case 243: break;
        case 127: 
          { return createToken(Symbol.PRAGMA);
          }
        case 244: break;
        case 143: 
          { return createToken(Symbol.TEMPLATE);
          }
        case 245: break;
        case 65: 
          { string.append('\t');
          }
        case 246: break;
        case 27: 
          { return createToken(Symbol.VERTICALVAR);
          }
        case 247: break;
        case 151: 
          { return createToken(Symbol.NAMESPACE);
          }
        case 248: break;
        case 17: 
          { return createToken(Symbol.SEMICOLON);
          }
        case 249: break;
        case 41: 
          { return createToken(Symbol.PLUSEQUAL);
          }
        case 250: break;
        case 93: 
          { return createToken(Symbol.RTRIPLEANGLEBRACKETEQUAL);
          }
        case 251: break;
        case 7: 
          { return createToken(Symbol.MINUS);
          }
        case 252: break;
        case 26: 
          { return createToken(Symbol.AND);
          }
        case 253: break;
        case 45: 
          { return createToken(Symbol.OR);
          }
        case 254: break;
        case 13: 
          { return createToken(Symbol.LBRACE);
          }
        case 255: break;
        case 79: 
          { return createToken(Symbol.RTRIPLEANGLEBRACKET);
          }
        case 256: break;
        case 63: 
          { return createToken(Symbol.SHARPSHARP);
          }
        case 257: break;
        case 4: 
          { return createToken(Symbol.ASTERISK);
          }
        case 258: break;
        case 24: 
          { return createToken(Symbol.QUESTIONMARK);
          }
        case 259: break;
        case 117: 
          { return createToken(Symbol.TYPEID);
          }
        case 260: break;
        case 119: 
          { return createToken(Symbol.IFNDEF);
          }
        case 261: break;
        case 70: 
          { return createToken(Symbol.RIGHTARROWASTERISK);
          }
        case 262: break;
        case 1: 
          { return createToken(yytext(), Symbol.UNKNOWN);
          }
        case 263: break;
        case 103: 
          { return createToken(Symbol.UNDEF);
          }
        case 264: break;
        case 110: 
          { return createToken(Symbol.WHILE);
          }
        case 265: break;
        case 55: 
          { return createToken(Symbol.COLONCOLON);
          }
        case 266: break;
        case 139: 
          { return createToken(Symbol.CHAR32_T);
          }
        case 267: break;
        case 12: 
          { return createToken(Symbol.RPAREN);
          }
        case 268: break;
        case 42: 
          { return createToken(Symbol.DO);
          }
        case 269: break;
        case 20: 
          { return createToken(Symbol.GREATER);
          }
        case 270: break;
        case 131: 
          { return createToken(Symbol.ALIGNAS);
          }
        case 271: break;
        case 81: 
          { return createToken(Symbol.LINE);
          }
        case 272: break;
        case 30: 
          { return createToken(Symbol.SHARP);
          }
        case 273: break;
        case 83: 
          { return createToken(Symbol.CASE);
          }
        case 274: break;
        case 107: 
          { return createToken(Symbol.THROW);
          }
        case 275: break;
        case 68: 
          { string.append('\"');
          }
        case 276: break;
        case 109: 
          { return createToken(Symbol.SHORT);
          }
        case 277: break;
        case 39: 
          { return createToken(Symbol.RIGHTARROW);
          }
        case 278: break;
        case 95: 
          { return createToken(Symbol.CLASS);
          }
        case 279: break;
        case 89: 
          { return createToken(Symbol.TRUE);
          }
        case 280: break;
        case 15: 
          { return createToken(Symbol.LBLACKET);
          }
        case 281: break;
        case 9: 
          { return createToken(Symbol.DOT);
          }
        case 282: break;
        case 38: 
          { return createToken(Symbol.MINUSEQUAL);
          }
        case 283: break;
        case 34: 
          { return createToken(Symbol.ASTERISKEQUAL);
          }
        case 284: break;
        case 156: 
          { return createToken(Symbol.DYNAMIC_CAST);
          }
        case 285: break;
        case 40: 
          { return createToken(Symbol.PLUSPLUS);
          }
        case 286: break;
        case 96: 
          { return createToken(Symbol.CATCH);
          }
        case 287: break;
        case 113: 
          { return createToken(Symbol.FRIEND);
          }
        case 288: break;
        case 21: 
          { return createToken(Symbol.LESS);
          }
        case 289: break;
        case 72: 
          { return createToken(Symbol.LDOTS);
          }
        case 290: break;
        case 122: 
          { return createToken(Symbol.STATIC);
          }
        case 291: break;
        case 142: 
          { return createToken(Symbol.UNSIGNED);
          }
        case 292: break;
        case 118: 
          { return createToken(Symbol.RETURN);
          }
        case 293: break;
        case 49: 
          { return createToken(Symbol.LESSEQUAL);
          }
        case 294: break;
        case 108: 
          { return createToken(Symbol.IFDEF);
          }
        case 295: break;
        case 91: 
          { return createToken(Symbol.NULL);
          }
        case 296: break;
        case 90: 
          { return createToken(Symbol.THIS);
          }
        case 297: break;
        case 140: 
          { return createToken(Symbol.EXPLICIT);
          }
        case 298: break;
        case 159: 
          { return createToken(Symbol.REINTERPRET_CAST);
          }
        case 299: break;
        case 36: 
          { return createToken(yytext(), Symbol.FLOATINGPOINTLITERAL);
          }
        case 300: break;
        case 11: 
          { return createToken(Symbol.LPAREN);
          }
        case 301: break;
        case 148: 
          { return createToken(Symbol.OVERRIDE);
          }
        case 302: break;
        case 123: 
          { return createToken(Symbol.SIGNED);
          }
        case 303: break;
        case 102: 
          { return createToken(Symbol.FALSE);
          }
        case 304: break;
        case 98: 
          { return createToken(Symbol.ENDIF);
          }
        case 305: break;
        case 129: 
          { return createToken(Symbol.NULLPTR);
          }
        case 306: break;
        case 120: 
          { return createToken(Symbol.INLINE);
          }
        case 307: break;
        case 59: 
          { return createToken(Symbol.CIRCUMFLEXEQUAL);
          }
        case 308: break;
        case 101: 
          { return createToken(Symbol.FINAL);
          }
        case 309: break;
        case 92: 
          { return createToken(Symbol.GOTO);
          }
        case 310: break;
        case 87: 
          { return createToken(Symbol.ENUM);
          }
        case 311: break;
        case 22: 
          { return createToken(Symbol.NOT);
          }
        case 312: break;
        case 111: 
          { return createToken(Symbol.EXTERN);
          }
        case 313: break;
        case 48: 
          { return createToken(Symbol.RDOUBLEANGLEBRACKET);
          }
        case 314: break;
        case 105: 
          { return createToken(Symbol.USING);
          }
        case 315: break;
        case 5: 
          { return createToken(yytext(), Symbol.INTEGERLITERAL);
          }
        case 316: break;
        case 121: 
          { return createToken(Symbol.STRUCT);
          }
        case 317: break;
        case 47: 
          { return createToken(Symbol.GREATEREQUAL);
          }
        case 318: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
